/*
 * This file is generated by jOOQ.
 */
package edu.java.scrapper.domain.jooq.codegen.tables;


import edu.java.scrapper.domain.jooq.codegen.DefaultSchema;
import edu.java.scrapper.domain.jooq.codegen.Keys;
import edu.java.scrapper.domain.jooq.codegen.tables.records.GithubReleaseRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class GithubRelease extends TableImpl<GithubReleaseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>GITHUB_RELEASE</code>
     */
    public static final GithubRelease GITHUB_RELEASE = new GithubRelease();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<GithubReleaseRecord> getRecordType() {
        return GithubReleaseRecord.class;
    }

    /**
     * The column <code>GITHUB_RELEASE.ID</code>.
     */
    public final TableField<GithubReleaseRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>GITHUB_RELEASE.REPO_ID</code>.
     */
    public final TableField<GithubReleaseRecord, Long> REPO_ID = createField(DSL.name("REPO_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>GITHUB_RELEASE.PUBLISHED_AT</code>.
     */
    public final TableField<GithubReleaseRecord, OffsetDateTime> PUBLISHED_AT = createField(DSL.name("PUBLISHED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private GithubRelease(Name alias, Table<GithubReleaseRecord> aliased) {
        this(alias, aliased, null);
    }

    private GithubRelease(Name alias, Table<GithubReleaseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>GITHUB_RELEASE</code> table reference
     */
    public GithubRelease(String alias) {
        this(DSL.name(alias), GITHUB_RELEASE);
    }

    /**
     * Create an aliased <code>GITHUB_RELEASE</code> table reference
     */
    public GithubRelease(Name alias) {
        this(alias, GITHUB_RELEASE);
    }

    /**
     * Create a <code>GITHUB_RELEASE</code> table reference
     */
    public GithubRelease() {
        this(DSL.name("GITHUB_RELEASE"), null);
    }

    public <O extends Record> GithubRelease(Table<O> child, ForeignKey<O, GithubReleaseRecord> key) {
        super(child, key, GITHUB_RELEASE);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public UniqueKey<GithubReleaseRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_5;
    }

    @Override
    @NotNull
    public List<ForeignKey<GithubReleaseRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_5C);
    }

    private transient GithubRepository _githubRepository;

    /**
     * Get the implicit join path to the <code>PUBLIC.GITHUB_REPOSITORY</code>
     * table.
     */
    public GithubRepository githubRepository() {
        if (_githubRepository == null)
            _githubRepository = new GithubRepository(this, Keys.CONSTRAINT_5C);

        return _githubRepository;
    }

    @Override
    @NotNull
    public GithubRelease as(String alias) {
        return new GithubRelease(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public GithubRelease as(Name alias) {
        return new GithubRelease(alias, this);
    }

    @Override
    @NotNull
    public GithubRelease as(Table<?> alias) {
        return new GithubRelease(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public GithubRelease rename(String name) {
        return new GithubRelease(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public GithubRelease rename(Name name) {
        return new GithubRelease(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public GithubRelease rename(Table<?> name) {
        return new GithubRelease(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row3<Long, Long, OffsetDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Long, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Long, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
