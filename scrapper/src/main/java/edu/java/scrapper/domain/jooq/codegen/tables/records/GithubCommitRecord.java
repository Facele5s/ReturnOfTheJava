/*
 * This file is generated by jOOQ.
 */
package edu.java.scrapper.domain.jooq.codegen.tables.records;


import edu.java.scrapper.domain.jooq.codegen.tables.GithubCommit;

import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;
import java.time.OffsetDateTime;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class GithubCommitRecord extends UpdatableRecordImpl<GithubCommitRecord> implements Record4<String, Long, String, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>GITHUB_COMMIT.SHA</code>.
     */
    public void setSha(@NotNull String value) {
        set(0, value);
    }

    /**
     * Getter for <code>GITHUB_COMMIT.SHA</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 1000000000)
    @NotNull
    public String getSha() {
        return (String) get(0);
    }

    /**
     * Setter for <code>GITHUB_COMMIT.REPO_ID</code>.
     */
    public void setRepoId(@Nullable Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>GITHUB_COMMIT.REPO_ID</code>.
     */
    @Nullable
    public Long getRepoId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>GITHUB_COMMIT.AUTHOR</code>.
     */
    public void setAuthor(@NotNull String value) {
        set(2, value);
    }

    /**
     * Getter for <code>GITHUB_COMMIT.AUTHOR</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 1000000000)
    @NotNull
    public String getAuthor() {
        return (String) get(2);
    }

    /**
     * Setter for <code>GITHUB_COMMIT.CREATED_AT</code>.
     */
    public void setCreatedAt(@NotNull OffsetDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>GITHUB_COMMIT.CREATED_AT</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row4<String, Long, String, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row4<String, Long, String, OffsetDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<String> field1() {
        return GithubCommit.GITHUB_COMMIT.SHA;
    }

    @Override
    @NotNull
    public Field<Long> field2() {
        return GithubCommit.GITHUB_COMMIT.REPO_ID;
    }

    @Override
    @NotNull
    public Field<String> field3() {
        return GithubCommit.GITHUB_COMMIT.AUTHOR;
    }

    @Override
    @NotNull
    public Field<OffsetDateTime> field4() {
        return GithubCommit.GITHUB_COMMIT.CREATED_AT;
    }

    @Override
    @NotNull
    public String component1() {
        return getSha();
    }

    @Override
    @Nullable
    public Long component2() {
        return getRepoId();
    }

    @Override
    @NotNull
    public String component3() {
        return getAuthor();
    }

    @Override
    @NotNull
    public OffsetDateTime component4() {
        return getCreatedAt();
    }

    @Override
    @NotNull
    public String value1() {
        return getSha();
    }

    @Override
    @Nullable
    public Long value2() {
        return getRepoId();
    }

    @Override
    @NotNull
    public String value3() {
        return getAuthor();
    }

    @Override
    @NotNull
    public OffsetDateTime value4() {
        return getCreatedAt();
    }

    @Override
    @NotNull
    public GithubCommitRecord value1(@NotNull String value) {
        setSha(value);
        return this;
    }

    @Override
    @NotNull
    public GithubCommitRecord value2(@Nullable Long value) {
        setRepoId(value);
        return this;
    }

    @Override
    @NotNull
    public GithubCommitRecord value3(@NotNull String value) {
        setAuthor(value);
        return this;
    }

    @Override
    @NotNull
    public GithubCommitRecord value4(@NotNull OffsetDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    @NotNull
    public GithubCommitRecord values(@NotNull String value1, @Nullable Long value2, @NotNull String value3, @NotNull OffsetDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GithubCommitRecord
     */
    public GithubCommitRecord() {
        super(GithubCommit.GITHUB_COMMIT);
    }

    /**
     * Create a detached, initialised GithubCommitRecord
     */
    @ConstructorProperties({ "sha", "repoId", "author", "createdAt" })
    public GithubCommitRecord(@NotNull String sha, @Nullable Long repoId, @NotNull String author, @NotNull OffsetDateTime createdAt) {
        super(GithubCommit.GITHUB_COMMIT);

        setSha(sha);
        setRepoId(repoId);
        setAuthor(author);
        setCreatedAt(createdAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised GithubCommitRecord
     */
    public GithubCommitRecord(edu.java.scrapper.domain.jooq.codegen.tables.pojos.GithubCommit value) {
        super(GithubCommit.GITHUB_COMMIT);

        if (value != null) {
            setSha(value.getSha());
            setRepoId(value.getRepoId());
            setAuthor(value.getAuthor());
            setCreatedAt(value.getCreatedAt());
            resetChangedOnNotNull();
        }
    }
}
