/*
 * This file is generated by jOOQ.
 */
package edu.java.scrapper.domain.jooq.codegen.tables.records;


import edu.java.scrapper.domain.jooq.codegen.tables.GithubRepository;

import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class GithubRepositoryRecord extends UpdatableRecordImpl<GithubRepositoryRecord> implements Record3<Long, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>GITHUB_REPOSITORY.ID</code>.
     */
    public void setId(@NotNull Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>GITHUB_REPOSITORY.ID</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>GITHUB_REPOSITORY.USER_NAME</code>.
     */
    public void setUserName(@NotNull String value) {
        set(1, value);
    }

    /**
     * Getter for <code>GITHUB_REPOSITORY.USER_NAME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 1000000000)
    @NotNull
    public String getUserName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>GITHUB_REPOSITORY.NAME</code>.
     */
    public void setName(@NotNull String value) {
        set(2, value);
    }

    /**
     * Getter for <code>GITHUB_REPOSITORY.NAME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 1000000000)
    @NotNull
    public String getName() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row3<Long, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Long> field1() {
        return GithubRepository.GITHUB_REPOSITORY.ID;
    }

    @Override
    @NotNull
    public Field<String> field2() {
        return GithubRepository.GITHUB_REPOSITORY.USER_NAME;
    }

    @Override
    @NotNull
    public Field<String> field3() {
        return GithubRepository.GITHUB_REPOSITORY.NAME;
    }

    @Override
    @NotNull
    public Long component1() {
        return getId();
    }

    @Override
    @NotNull
    public String component2() {
        return getUserName();
    }

    @Override
    @NotNull
    public String component3() {
        return getName();
    }

    @Override
    @NotNull
    public Long value1() {
        return getId();
    }

    @Override
    @NotNull
    public String value2() {
        return getUserName();
    }

    @Override
    @NotNull
    public String value3() {
        return getName();
    }

    @Override
    @NotNull
    public GithubRepositoryRecord value1(@NotNull Long value) {
        setId(value);
        return this;
    }

    @Override
    @NotNull
    public GithubRepositoryRecord value2(@NotNull String value) {
        setUserName(value);
        return this;
    }

    @Override
    @NotNull
    public GithubRepositoryRecord value3(@NotNull String value) {
        setName(value);
        return this;
    }

    @Override
    @NotNull
    public GithubRepositoryRecord values(@NotNull Long value1, @NotNull String value2, @NotNull String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GithubRepositoryRecord
     */
    public GithubRepositoryRecord() {
        super(GithubRepository.GITHUB_REPOSITORY);
    }

    /**
     * Create a detached, initialised GithubRepositoryRecord
     */
    @ConstructorProperties({ "id", "userName", "name" })
    public GithubRepositoryRecord(@NotNull Long id, @NotNull String userName, @NotNull String name) {
        super(GithubRepository.GITHUB_REPOSITORY);

        setId(id);
        setUserName(userName);
        setName(name);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised GithubRepositoryRecord
     */
    public GithubRepositoryRecord(edu.java.scrapper.domain.jooq.codegen.tables.pojos.GithubRepository value) {
        super(GithubRepository.GITHUB_REPOSITORY);

        if (value != null) {
            setId(value.getId());
            setUserName(value.getUserName());
            setName(value.getName());
            resetChangedOnNotNull();
        }
    }
}
