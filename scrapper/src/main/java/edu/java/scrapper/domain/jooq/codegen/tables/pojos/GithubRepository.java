/*
 * This file is generated by jOOQ.
 */
package edu.java.scrapper.domain.jooq.codegen.tables.pojos;


import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;
import java.io.Serializable;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class GithubRepository implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long id;
    private String userName;
    private String name;

    public GithubRepository() {}

    public GithubRepository(GithubRepository value) {
        this.id = value.id;
        this.userName = value.userName;
        this.name = value.name;
    }

    @ConstructorProperties({ "id", "userName", "name" })
    public GithubRepository(
        @NotNull Long id,
        @NotNull String userName,
        @NotNull String name
    ) {
        this.id = id;
        this.userName = userName;
        this.name = name;
    }

    /**
     * Getter for <code>GITHUB_REPOSITORY.ID</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>GITHUB_REPOSITORY.ID</code>.
     */
    public void setId(@NotNull Long id) {
        this.id = id;
    }

    /**
     * Getter for <code>GITHUB_REPOSITORY.USER_NAME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 1000000000)
    @NotNull
    public String getUserName() {
        return this.userName;
    }

    /**
     * Setter for <code>GITHUB_REPOSITORY.USER_NAME</code>.
     */
    public void setUserName(@NotNull String userName) {
        this.userName = userName;
    }

    /**
     * Getter for <code>GITHUB_REPOSITORY.NAME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 1000000000)
    @NotNull
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>GITHUB_REPOSITORY.NAME</code>.
     */
    public void setName(@NotNull String name) {
        this.name = name;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final GithubRepository other = (GithubRepository) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.userName == null) {
            if (other.userName != null)
                return false;
        }
        else if (!this.userName.equals(other.userName))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.userName == null) ? 0 : this.userName.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("GithubRepository (");

        sb.append(id);
        sb.append(", ").append(userName);
        sb.append(", ").append(name);

        sb.append(")");
        return sb.toString();
    }
}
